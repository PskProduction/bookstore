swagger: "2.0"
info:
  title: Bookstore API
  version: "1.0"
  description: An API for managing books and their authors

basePath: /api

schemes:
  - http

produces:
  - application/json

consumes:
  - application/json

paths:
  /books:
    get:
      tags:
        - Book
      summary: Get a list of all books
      description: Returns a list of all books and their authors
      responses:
        200:
          description: All books
          schema:
            type: array
            items:
              $ref: '#/definitions/Book'
    post:
      tags:
        - Book
      summary: Add a new book
      description: Adds a new book to the database
      parameters:
        - name: book
          in: body
          required: true
          schema:
            $ref: '#/definitions/Book'
      responses:
        201:
          description: Book created
          schema:
            $ref: '#/definitions/Book'
        400:
          description: Bad request
        404:
          description: Author not found
  /books/{book_id}:
    get:
      tags:
        - Book
      summary: Get a book by ID.
      description: Returns information about a specific book
      parameters:
        - name: book_id
          in: path
          type: integer
          required: true
          description: ID of the book to retrieve
      responses:
        200:
          description: The requested book
          schema:
            $ref: '#/definitions/Book'
        400:
          description: Book not found
          schema:
            properties:
              message:
                type: string
                example: 'Book not found'
    put:
      tags:
        - Book
      summary: Update a book by ID
      description: Updates information about a specific book
      parameters:
        - name: book_id
          in: path
          type: integer
          required: true
          description: ID of the book to update
        - name: book
          in: body
          required: true
          description: Book information update
          schema:
            $ref: '#/definitions/Book'
      responses:
        200:
          description: The updated book
          schema:
            $ref: '#/definitions/Book'
        400:
          description: Book not found
          schema:
            properties:
              message:
                type: string
                example: 'Book not found'
    delete:
      tags:
        - Book
      summary: Delete a book by ID
      description: Deletes a specific book from the database
      parameters:
        - name: book_id
          in: path
          type: integer
          required: true
          description: The ID of the book to delete
      responses:
        200:
          description: Book deleted successfully
          schema:
            properties:
              message:
                type: string
                example: 'Book delete successfully'
        400:
          description: Book not found
          schema:
            properties:
              message:
                type: string
                example: 'Book not found'
  /authors:
    post:
      summary: Endpoint for author creation
      tags:
        - Author
      parameters:
        - in: body
          name: new author params
          schema:
            $ref: '#/definitions/Author'
      responses:
        '201':
          description: The author has been created
          schema:
            $ref: '#/definitions/Author'
        '400':
          description: Bad request
  /authors/{author_id}:
    get:
      summary: Get books for author ID
      tags:
        - Author
      parameters:
        - name: author_id
          in: path
          description: The ID of the author
          required: true
          type: integer
      responses:
        '200':
          description: get all books by author id
          schema:
            $ref: '#/definitions/AuthorWithBooks'
        '404':
          description: Author not found
    delete:
      summary: Delete author by ID
      tags:
        - Author
      parameters:
        - name: author_id
          in: path
          description: The ID of the author to delete
          required: true
          type: integer
          minimum: 1
      responses:
        '204':
          description: Author deleted successfully
        '404':
          description: Author not found
definitions:
  Author:
    type: object
    properties:
      id:
        type: integer
        readOnly: true
      first_name:
        type: string
      last_name:
        type: string
      middle_name:
        type: string
    required:
      - first_name
      - last_name
  AuthorWithBooks:
    allOf:
      - $ref: '#/definitions/Author'
      - type: object
        properties:
          books:
            type: array
            items:
              $ref: '#/definitions/Book'
  Book:
    type: object
    properties:
      title:
        type: string
        description: The title of the book.
      author_id:
        type: integer
        description: The unique identifier of the book's author.
    required:
      - title
      - author_id
